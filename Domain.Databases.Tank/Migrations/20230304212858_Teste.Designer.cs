// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tank;

#nullable disable

namespace Tank.Migrations
{
    [DbContext(typeof(TankContext))]
    [Migration("20230304212858_Teste")]
    partial class Teste
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tank.Models.Entities.Character.Cards", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Cards", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterCards", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.HasIndex("CardId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterCards", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterMarriages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DivorceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeddingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("CharacterMarriages", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterRanks", b =>
                {
                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RankId")
                        .IsUnique();

                    b.ToTable("CharacterRanks", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterTeachers", b =>
                {
                    b.Property<int>("CharacterTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RelationshipStartEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RelationshipStartTime")
                        .HasColumnType("datetime2");

                    b.HasIndex("CharacterTeacherId");

                    b.ToTable("CharacterTeachers", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Characters", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<int>("Coupons")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("Honor")
                        .HasColumnType("int");

                    b.Property<int>("Medals")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TotalFights")
                        .HasColumnType("int");

                    b.Property<int>("WinnedFights")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Characters", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharactersCustomizedItems", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharactersCustomizedItems", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharactersFriends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FriendshipEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FriendshipStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharactersFriends", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Levels", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Blood")
                        .HasColumnType("int");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Level");

                    b.ToTable("Levels", "Character");

                    b.HasData(
                        new
                        {
                            Level = 1,
                            Blood = 1000,
                            Xp = 0L
                        },
                        new
                        {
                            Level = 2,
                            Blood = 1050,
                            Xp = 37L
                        },
                        new
                        {
                            Level = 3,
                            Blood = 1100,
                            Xp = 162L
                        },
                        new
                        {
                            Level = 4,
                            Blood = 1150,
                            Xp = 505L
                        },
                        new
                        {
                            Level = 5,
                            Blood = 1200,
                            Xp = 1283L
                        },
                        new
                        {
                            Level = 6,
                            Blood = 1250,
                            Xp = 2801L
                        },
                        new
                        {
                            Level = 7,
                            Blood = 1300,
                            Xp = 5462L
                        },
                        new
                        {
                            Level = 8,
                            Blood = 1350,
                            Xp = 9771L
                        },
                        new
                        {
                            Level = 9,
                            Blood = 1400,
                            Xp = 16341L
                        },
                        new
                        {
                            Level = 10,
                            Blood = 1450,
                            Xp = 25899L
                        },
                        new
                        {
                            Level = 11,
                            Blood = 1530,
                            Xp = 39291L
                        },
                        new
                        {
                            Level = 12,
                            Blood = 1610,
                            Xp = 57489L
                        },
                        new
                        {
                            Level = 13,
                            Blood = 1690,
                            Xp = 81594L
                        },
                        new
                        {
                            Level = 14,
                            Blood = 1770,
                            Xp = 112847L
                        },
                        new
                        {
                            Level = 15,
                            Blood = 1850,
                            Xp = 152630L
                        },
                        new
                        {
                            Level = 16,
                            Blood = 1970,
                            Xp = 202472L
                        },
                        new
                        {
                            Level = 17,
                            Blood = 2090,
                            Xp = 264058L
                        },
                        new
                        {
                            Level = 18,
                            Blood = 2210,
                            Xp = 339232L
                        },
                        new
                        {
                            Level = 19,
                            Blood = 2330,
                            Xp = 430003L
                        },
                        new
                        {
                            Level = 20,
                            Blood = 2450,
                            Xp = 538554L
                        },
                        new
                        {
                            Level = 21,
                            Blood = 2620,
                            Xp = 667242L
                        },
                        new
                        {
                            Level = 22,
                            Blood = 2790,
                            Xp = 818609L
                        },
                        new
                        {
                            Level = 23,
                            Blood = 2960,
                            Xp = 995383L
                        },
                        new
                        {
                            Level = 24,
                            Blood = 3130,
                            Xp = 1200489L
                        },
                        new
                        {
                            Level = 25,
                            Blood = 3300,
                            Xp = 1437053L
                        },
                        new
                        {
                            Level = 26,
                            Blood = 3380,
                            Xp = 1753103L
                        },
                        new
                        {
                            Level = 27,
                            Blood = 3460,
                            Xp = 2112735L
                        },
                        new
                        {
                            Level = 28,
                            Blood = 3540,
                            Xp = 2519637L
                        },
                        new
                        {
                            Level = 29,
                            Blood = 3620,
                            Xp = 2977665L
                        },
                        new
                        {
                            Level = 30,
                            Blood = 3700,
                            Xp = 3490849L
                        },
                        new
                        {
                            Level = 31,
                            Blood = 3870,
                            Xp = 4145185L
                        },
                        new
                        {
                            Level = 32,
                            Blood = 4040,
                            Xp = 4873978L
                        },
                        new
                        {
                            Level = 33,
                            Blood = 4210,
                            Xp = 5684269L
                        },
                        new
                        {
                            Level = 34,
                            Blood = 4380,
                            Xp = 6583537L
                        },
                        new
                        {
                            Level = 35,
                            Blood = 4550,
                            Xp = 7579710L
                        },
                        new
                        {
                            Level = 36,
                            Blood = 4670,
                            Xp = 8681174L
                        },
                        new
                        {
                            Level = 37,
                            Blood = 4790,
                            Xp = 9896788L
                        },
                        new
                        {
                            Level = 38,
                            Blood = 4910,
                            Xp = 11235892L
                        },
                        new
                        {
                            Level = 39,
                            Blood = 5030,
                            Xp = 12708322L
                        },
                        new
                        {
                            Level = 40,
                            Blood = 5150,
                            Xp = 14324419L
                        },
                        new
                        {
                            Level = 41,
                            Blood = 5200,
                            Xp = 16263735L
                        },
                        new
                        {
                            Level = 42,
                            Blood = 5250,
                            Xp = 18590915L
                        },
                        new
                        {
                            Level = 43,
                            Blood = 5300,
                            Xp = 21383531L
                        },
                        new
                        {
                            Level = 44,
                            Blood = 5350,
                            Xp = 24734669L
                        },
                        new
                        {
                            Level = 45,
                            Blood = 5400,
                            Xp = 28756036L
                        },
                        new
                        {
                            Level = 46,
                            Blood = 5450,
                            Xp = 33581676L
                        },
                        new
                        {
                            Level = 47,
                            Blood = 5500,
                            Xp = 39372443L
                        },
                        new
                        {
                            Level = 48,
                            Blood = 5550,
                            Xp = 46321365L
                        },
                        new
                        {
                            Level = 49,
                            Blood = 5600,
                            Xp = 54660070L
                        },
                        new
                        {
                            Level = 50,
                            Blood = 5650,
                            Xp = 63832646L
                        },
                        new
                        {
                            Level = 51,
                            Blood = 5680,
                            Xp = 73922480L
                        },
                        new
                        {
                            Level = 52,
                            Blood = 5710,
                            Xp = 85021297L
                        },
                        new
                        {
                            Level = 53,
                            Blood = 5740,
                            Xp = 97229996L
                        },
                        new
                        {
                            Level = 54,
                            Blood = 5770,
                            Xp = 110659565L
                        },
                        new
                        {
                            Level = 55,
                            Blood = 5800,
                            Xp = 125432090L
                        },
                        new
                        {
                            Level = 56,
                            Blood = 5830,
                            Xp = 140943242L
                        },
                        new
                        {
                            Level = 57,
                            Blood = 5860,
                            Xp = 157229951L
                        },
                        new
                        {
                            Level = 58,
                            Blood = 5890,
                            Xp = 174330996L
                        },
                        new
                        {
                            Level = 59,
                            Blood = 5920,
                            Xp = 192287093L
                        },
                        new
                        {
                            Level = 60,
                            Blood = 5950,
                            Xp = 211140995L
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.MarriageProposals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcceptedProposal")
                        .HasColumnType("bit");

                    b.Property<int>("FromCharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProposalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProposalSpeech")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToCharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromCharacterId");

                    b.HasIndex("ToCharacterId");

                    b.ToTable("MarriageProposals", "Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Ranks", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Guard")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Luck")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ranks", "Character");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Agility = 0,
                            Attack = 0,
                            Damage = 0,
                            Defense = 0,
                            Guard = 0,
                            Hp = 0,
                            Luck = 0,
                            Name = "Novato"
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Item.ItemBindTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemBindTypes", "Item");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Bind 0"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Bind 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bind 2"
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Item.ItemHoleTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemHoleTypes", "Item");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Hole for attacking purpose",
                            OpenCost = 0
                        },
                        new
                        {
                            Id = 1,
                            Description = "Hole for defending purpose",
                            OpenCost = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hole for increase attributes purpose",
                            OpenCost = 0
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Item.Items", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("Guard")
                        .HasColumnType("int");

                    b.Property<int?>("Hole1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hole2Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hole3Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hole4Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hole5Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hole6Id")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComposable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDroppable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEquipable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStrengthenable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsable")
                        .HasColumnType("bit");

                    b.Property<int>("ItemBindTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Luck")
                        .HasColumnType("int");

                    b.Property<int?>("MinLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Hole1Id");

                    b.HasIndex("Hole2Id");

                    b.HasIndex("Hole3Id");

                    b.HasIndex("Hole4Id");

                    b.HasIndex("Hole5Id");

                    b.HasIndex("Hole6Id");

                    b.HasIndex("ItemBindTypeId");

                    b.HasIndex("ItemsCategoryId");

                    b.ToTable("Item", "Item");
                });

            modelBuilder.Entity("Tank.Models.Entities.Item.ItemsCategories", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemsCategories", "Item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chapéu",
                            Place = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Óculos",
                            Place = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cabelo",
                            Place = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Face",
                            Place = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Roupa",
                            Place = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Olhos",
                            Place = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Arma",
                            Place = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pulseiras",
                            Place = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Anéis",
                            Place = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "Itens de combate"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Itens de auxílio"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Itens de Tarefa"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Terno",
                            Place = 11
                        },
                        new
                        {
                            Id = 14,
                            Name = "Colar",
                            Place = 12
                        },
                        new
                        {
                            Id = 15,
                            Name = "Decoração",
                            Place = 13
                        },
                        new
                        {
                            Id = 16,
                            Name = "Bolha",
                            Place = 14
                        },
                        new
                        {
                            Id = 17,
                            Name = "Itens auxiliares",
                            Place = 15
                        },
                        new
                        {
                            Id = 18,
                            Name = "Baú de Cartões"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ajuda",
                            Place = 16
                        },
                        new
                        {
                            Id = 20,
                            Name = "Poção de Prática"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Inventário de Missões Práticas"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Baú de Cartões"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Armas especiais",
                            Place = 27
                        },
                        new
                        {
                            Id = 30,
                            Name = "Propriedade especial"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Mão Secundária Especial"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Sementes"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Fertilizante"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Alimento de mascote"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Ovo mascote"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Colheita"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Arma mascote"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Chapéu mascote"
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Server.ServerConfigs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerConfig", "Server");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PublicRSAKey",
                            Value = "-----BEGIN PUBLIC KEY-----\r\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL1ezivGNWo8deIaiWOtukZ5hsczjqza\r\nuNeF0ieYdWN8fE6/YZpB4ZOyZiGhp8EfRlFpUjzPtw1i5CcA7K+SWHUCAwEAAQ==\r\n-----END PUBLIC KEY-----"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PrivateRSAKey",
                            Value = "-----BEGIN RSA PRIVATE KEY-----\r\nMIIBOgIBAAJBAL1ezivGNWo8deIaiWOtukZ5hsczjqzauNeF0ieYdWN8fE6/YZpB\r\n4ZOyZiGhp8EfRlFpUjzPtw1i5CcA7K+SWHUCAwEAAQJAMLJxiDY3RDN6CQPT8ssZ\r\nDMhxjUZH2VGBmQKzsTT2cvd94bH7V4ETGv011Tv5d31eeMudGLkiwUMIQUVBq/ba\r\nPQIhAOLCUPZxw4v/e3GnRi8Zm31wymdGk40AFuPApAGNFbDnAiEA1co6HkX4psjf\r\ny+XzxcSPlojhiyb98CQV2x5akJz1FEMCIQCLQHVjwl0pvgzasLSi/ADGudsyLN8z\r\nuZhU6NpOsYtehQIgMFrAEG7VEawnai/FljqiG3M0SEv2baVLyDayVzkY+Y8CIBji\r\ngNSm2/bwJM4fYfSsHD2BXOTneOWWP9ZtM6i30gWC\r\n-----END RSA PRIVATE KEY-----"
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Server.ServerStates", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerStates", "Server");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Server offline"
                        },
                        new
                        {
                            Id = 0,
                            Description = "Server online"
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Server.Servers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AllowedLevel")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerStateId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCharacters")
                        .HasColumnType("int");

                    b.Property<int>("TotalRooms")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerStateId");

                    b.ToTable("Servers", "Server");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Ip = "127.0.0.1",
                            Name = "Test server",
                            Port = 9202,
                            ServerStateId = 0,
                            TotalCharacters = 0,
                            TotalRooms = 0
                        });
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Cards", b =>
                {
                    b.HasOne("Tank.Models.Entities.Item.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterCards", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Cards", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tank.Models.Entities.Character.Characters", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterMarriages", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "Partner")
                        .WithMany("Marriages")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterRanks", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tank.Models.Entities.Character.Ranks", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharacterTeachers", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "CharacterTeacher")
                        .WithMany()
                        .HasForeignKey("CharacterTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterTeacher");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Characters", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Ranks", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.HasOne("Tank.Models.Entities.Character.Characters", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Rank");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharactersCustomizedItems", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tank.Models.Entities.Item.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.CharactersFriends", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "Character")
                        .WithMany("Friends")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.MarriageProposals", b =>
                {
                    b.HasOne("Tank.Models.Entities.Character.Characters", "FromCharacter")
                        .WithMany()
                        .HasForeignKey("FromCharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tank.Models.Entities.Character.Characters", "ToCharacter")
                        .WithMany()
                        .HasForeignKey("ToCharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromCharacter");

                    b.Navigation("ToCharacter");
                });

            modelBuilder.Entity("Tank.Models.Entities.Item.Items", b =>
                {
                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole1")
                        .WithMany()
                        .HasForeignKey("Hole1Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole2")
                        .WithMany()
                        .HasForeignKey("Hole2Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole3")
                        .WithMany()
                        .HasForeignKey("Hole3Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole4")
                        .WithMany()
                        .HasForeignKey("Hole4Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole5")
                        .WithMany()
                        .HasForeignKey("Hole5Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemHoleTypes", "Hole6")
                        .WithMany()
                        .HasForeignKey("Hole6Id");

                    b.HasOne("Tank.Models.Entities.Item.ItemBindTypes", "ItemBindType")
                        .WithMany()
                        .HasForeignKey("ItemBindTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tank.Models.Entities.Item.ItemsCategories", "ItemsCategory")
                        .WithMany()
                        .HasForeignKey("ItemsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hole1");

                    b.Navigation("Hole2");

                    b.Navigation("Hole3");

                    b.Navigation("Hole4");

                    b.Navigation("Hole5");

                    b.Navigation("Hole6");

                    b.Navigation("ItemBindType");

                    b.Navigation("ItemsCategory");
                });

            modelBuilder.Entity("Tank.Models.Entities.Server.Servers", b =>
                {
                    b.HasOne("Tank.Models.Entities.Server.ServerStates", "ServerState")
                        .WithMany()
                        .HasForeignKey("ServerStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServerState");
                });

            modelBuilder.Entity("Tank.Models.Entities.Character.Characters", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Marriages");
                });
#pragma warning restore 612, 618
        }
    }
}
